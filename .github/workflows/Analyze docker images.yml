# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Analyze Docker Images

on:
  pull_request:
    branches: [main, 'b-v*-patch*','feature-*']
  workflow_dispatch:

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CURRENT_STANDARD_VERSION: "5.1.0"
  PACKAGE_VERSION: "7.3"
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}  

jobs:
  FindStandardAndExtensionVersions:
    uses: Ed-Fi-Alliance-OSS/Ed-Fi-ODS/.github/workflows/Find Standard and Extension Versions.yml@874b608a0f3a14243e0035dd1222169fafcbe8d3
    with:
      calling_branch: ${{ github.head_ref || github.ref_name }}

  analyze-docker:
    needs: FindStandardAndExtensionVersions
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      security-events: write
    strategy:
      matrix:
        StandardVersion: ${{ fromJson(needs.FindStandardAndExtensionVersions.outputs.StandardVersions) }}
        ExtensionVersion: ${{ fromJson(needs.FindStandardAndExtensionVersions.outputs.ExtensionVersions) }}    
        dockerfile:
          [
            { name: "ods-api-bulk-load-console", path: "alpine" },
            { name: "ods-api-db-admin", path: "alpine/pgsql" },
            { name: "ods-api-db-ods-minimal", path: "alpine/pgsql" },
            { name: "ods-api-db-ods-sandbox", path: "alpine/pgsql" },
            { name: "ods-api-swaggerui", path: "alpine" },
            { name: "ods-api-web-api", path: "alpine/pgsql" },
            { name: "ods-api-web-api", path: "alpine/mssql" },
            { name: "ods-api-web-sandbox-admin", path: "alpine/pgsql" },
            { name: "ods-api-web-sandbox-admin", path: "alpine/mssql" },
            { name: "ods-api-db-admin", path: "ubuntu/mssql" },
            { name: "ods-api-db-ods-minimal", path: "ubuntu/mssql" },
            { name: "ods-api-db-ods-sandbox", path: "ubuntu/mssql" }
          ]
    name: ${{ matrix.dockerfile.name }}/${{ matrix.dockerfile.path }} Image for (Standard ${{ matrix.StandardVersion }} Extension ${{ matrix.ExtensionVersion }}) 
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4

      - name: Log in to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build  ${{ matrix.dockerfile.name }} image in path ${{ matrix.dockerfile.path }}
        run: |
          ./get-versions.ps1 -PackageVersion ${{ env.PACKAGE_VERSION }} -StandardVersion ${{ matrix.StandardVersion }} -ExtensionVersion ${{ matrix.ExtensionVersion }} -PreRelease
          ./Invoke-Build.ps1 -PackageVersion ${{ env.PACKAGE_VERSION }} -PreRelease -ImageName ${{ matrix.dockerfile.name }} -Path ${{ matrix.dockerfile.path }}
          $image ="edfialliance/${{ matrix.dockerfile.name }}:${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}"

          if ("${{ matrix.dockerfile.path }}".EndsWith("mssql")) {
              $image += "-mssql"
          }          
          echo "IMAGENAME=$image">> $env:GITHUB_ENV
        working-directory: Docker
        shell: pwsh

      - name: Analyze
        uses: docker/scout-action@67eb1afe777307506aaecb9acd9a0e0389cb99ae # v1.5.0
        with:
          command: cves
          image: ${{ env.IMAGENAME }}
          sarif-file: sarif-${{ matrix.dockerfile.name }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}.output.json
          summary: true
          only-severities: "critical,high"

      - name: Upload SARIF result
        id: upload-sarif
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: github/codeql-action/upload-sarif@df32e399139a3050671466d7d9b3cbacc1cfd034 #codeql-bundle-v2.15.2
        with:
          sarif_file: sarif-${{ matrix.dockerfile.name }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}.output.json

      - name: Set Dockerfile Path with Hyphens
        id: set-dockerfile-path
        run: |
          $newPath = "${{ matrix.dockerfile.path }}" -replace '/', '-'
          echo "DockerFile-ModifiedPath=$newPath">> $env:GITHUB_ENV
        shell: pwsh

      - name: Collect vulnerabilities as PR comment
        run: |

          # Prepare Markdown table structure for vulnerabilities
          function ConvertTo-MarkdownTable {
              param (
                  [string]$vulnerability,
                  [string]$severity,
                  [string]$package,
                  [string]$affectedRange,
                  [string]$fixedVersion,
                  [string]$cvssScore
              )

              return @"
          |-------------------|-----------------------------------------|
          | **Vulnerability** | **$vulnerability** |
          |-------------------|-----------------------------------------|
          | **Severity**      | ðŸš¨ **$severity**              |
          | **Package**       | $package                                |
          | **Affected Range**| $affectedRange                          |
          | **Fixed Version** | $fixedVersion                           |
          | **CVSS Score**    | $cvssScore                              |


          "@
          }

          # Read the SARIF file
          $sarifFile = "sarif-${{ matrix.dockerfile.name }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}.output.json"
          $sarifData = Get-Content $sarifFile | ConvertFrom-Json

          # Extract vulnerabilities from SARIF file
          $vulnerabilities = $sarifData.runs.results | Where-Object { $_.level -in @('error') }

          $commentBody =$null 

          # If there are vulnerabilities, prepare the comment
          if ($vulnerabilities.Count -gt 0) {
            $commentBody = "`n### Vulnerabilities of **${{ matrix.dockerfile.name }}**:`n"
            foreach ($vuln in $vulnerabilities) {

              $messageText = $vuln.message.text

              # Using regex to extract values from the formatted message text
              $vulnerability = ($messageText -match 'Vulnerability\s*:\s*(\S+)') ? $matches[1] : ""
              $severity = ($messageText -match 'Severity\s*:\s*(\S+)') ? $matches[1] : ""
              $package = ($messageText -match 'Package\s*:\s*(\S+)') ? $matches[1] : ""
              $affectedRange = ($messageText -match 'Affected range\s*:\s*([^\r\n]+)') ? $matches[1] : ""
              $fixedVersion = ($messageText -match 'Fixed version\s*:\s*(\S+)') ? $matches[1] : ""
              $cvssScore = ($messageText -match 'CVSS Score\s*:\s*(\S+)') ? $matches[1] : ""

              # Create the Markdown table for each vulnerability
              $markdownTable = ConvertTo-MarkdownTable `
                  -vulnerability $vulnerability `
                  -severity $severity `
                  -package $package `
                  -affectedRange  $affectedRange `
                  -fixedVersion $fixedVersion `
                  -cvssScore $cvssScore

              # Append the table to the comment body
              $commentBody += $markdownTable
                  }

          } else {
            $commentBody ="No vulnerabilities found for ${{ matrix.dockerfile.name }}.${{ env.DockerFile-ModifiedPath }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}"
          }

          $commentBody = @"
          <details>
            <summary>Vulnerabilities Report</summary>
              $commentBody 
          </details>
          "@

          $outputFile = "vulnerabilities-${{ matrix.dockerfile.name }}.${{ env.DockerFile-ModifiedPath }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}.txt"
          Add-Content -Path $outputFile -Value $commentBody
          echo "Saved vulnerabilities to $outputFile"
        shell: pwsh
      
      - name: Upload vulnerabilities-${{ matrix.dockerfile.name }}.${{ env.DockerFile-ModifiedPath }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }} Report
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: vulnerabilities-${{ matrix.dockerfile.name }}.${{ env.DockerFile-ModifiedPath }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}
          path: vulnerabilities-${{ matrix.dockerfile.name }}.${{ env.DockerFile-ModifiedPath }}.${{ env.PACKAGE_VERSION }}.0-${{ matrix.StandardVersion }}.txt    

  aggregate-vulnerability-results:
    needs: analyze-docker  # Ensure this runs after the 'analyze-docker' job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all vulnerability reports
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 #v4.1.1
        with:
          path: ./vulnerability-reports

      - name: Delete Previous vulnerability report in  PR comment
        shell: pwsh
        run: |
          $prNumber = ${{ github.event.pull_request.number }}
          $repo = "${{ github.repository }}"
          $keyword = " Vulnerabilities"

          # Get all comments on the PR
          $commentsJson = gh api /repos/$repo/issues/$prNumber/comments --jq '.[] | {id: .id, body: .body}'

          $comments = $commentsJson | ConvertFrom-Json

          Write-Host "$comments"
          # Find and delete the previous comment containing the keyword
          foreach ($comment in $comments) {
              if ($comment.body -like "*$keyword*") {
                  Write-Host "Deleted comment ID $($comment.id)"
                  # Write-Host "Comment Body: $($comment.body)"
                  Write-Host "----------------------------"
                  gh api --method DELETE /repos/$repo/issues/comments/$($comment.id)
              }
          }
        env:
          GH_TOKEN: ${{ secrets.REPO_DISPATCH_TOKEN }}  
      - name: Combine vulnerability reports
        shell: pwsh
        run: |
          # Create a file to store the combined report
          $combinedReport = "combined-vulnerability-report.txt"
          New-Item -Path $combinedReport -ItemType File -Force

          # Get all files in the directory
          $files = Get-ChildItem -Path ./vulnerability-reports -Recurse -File

          foreach ($file in $files) {
              Write-Host "Adding $($file.FullName) to the combined report."
              Add-Content -Path $combinedReport -Value "`n### Vulnerabilities from $($file.Name):`n"
              Get-Content -Path $file.FullName | Add-Content -Path $combinedReport
              Add-Content -Path $combinedReport -Value "`n"  # Add a blank line between reports
          }

          # Display the combined report
          # Get-Content -Path $combinedReport
          $combinedReportContent = Get-Content -Path $combinedReport -Raw
          gh pr comment ${{ github.event.pull_request.number }} --body "$combinedReportContent"
        env:
          GH_TOKEN: ${{ secrets.REPO_DISPATCH_TOKEN }} 