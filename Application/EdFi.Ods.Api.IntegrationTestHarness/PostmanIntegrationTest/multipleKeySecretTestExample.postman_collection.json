{
	"info": {
		"_postman_id": "da943c8b-6424-426b-b62a-8c916df77d2e",
		"name": "Update the postman test harness to create multiple key/secrets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetStudentWithAccessToken1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "621c4bb3-f57e-48a8-844f-9108d82cadc2",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ac1keyAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{apiBaseUrl}}/data/v3/ed-fi/students/E59DC7FC78A247E88BE4358709F4C2C4",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students",
						"E59DC7FC78A247E88BE4358709F4C2C4"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetStudentWithAccessToken2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff2c4448-b029-42a6-929d-70d30b7c981f",
						"exec": [
							"pm.test(\"Status code is 403\", () => {",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ac2keyAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiBaseUrl}}/data/v3/ed-fi/students/E59DC7FC78A247E88BE4358709F4C2C4",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students",
						"E59DC7FC78A247E88BE4358709F4C2C4"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "729c6c23-c0f7-4c2a-bcc4-cdca8da91c25",
				"type": "text/javascript",
				"exec": [
					"",
					"CreateAccessToken(\"ac1KeyTokenExpiry\",",
					"                  \"ac1keyAccessToken\",",
					"                  \"ApiClient1Key\", ",
					"                  \"ApiClient1Secret\")",
					"                  ",
					"",
					"CreateAccessToken(\"ac2KeyTokenExpiry\",",
					"                  \"ac2keyAccessToken\",",
					"                  \"ApiClient2Key\", ",
					"                  \"ApiClient2Secret\")",
					"",
					"",
					"function CreateAccessToken(tokenExpiry, accessToken, client, secret, setupLeaIdsFunc){",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the AccessToken or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get(tokenExpiry);",
					"let currentToken = pm.environment.get(accessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('apiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(client);",
					"    let clientSecret = pm.environment.get(secret);",
					"",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/json\"",
					"        ],",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({ Grant_type: grantType })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(accessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(tokenExpiry, expiryDate.getTime());",
					"        ",
					"        ",
					"    });",
					"}",
					"",
					"}",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "36e58b0f-3b2b-40df-938f-7cf146b49cde",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}